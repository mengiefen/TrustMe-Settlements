/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace TradeLib {
  export type NFTStruct = {
    addressNFTToSell: PromiseOrValue<string>;
    tokenIdNFTToSell: PromiseOrValue<BigNumberish>;
    addressNFTToBuy: PromiseOrValue<string>;
    tokenIdNFTToBuy: PromiseOrValue<BigNumberish>;
  };

  export type NFTStructOutput = [string, BigNumber, string, BigNumber] & {
    addressNFTToSell: string;
    tokenIdNFTToSell: BigNumber;
    addressNFTToBuy: string;
    tokenIdNFTToBuy: BigNumber;
  };

  export type TokenStruct = {
    tokenToSell: PromiseOrValue<string>;
    amountOfTokenToSell: PromiseOrValue<BigNumberish>;
    tokenToBuy: PromiseOrValue<string>;
    amountOfTokenToBuy: PromiseOrValue<BigNumberish>;
  };

  export type TokenStructOutput = [string, BigNumber, string, BigNumber] & {
    tokenToSell: string;
    amountOfTokenToSell: BigNumber;
    tokenToBuy: string;
    amountOfTokenToBuy: BigNumber;
  };

  export type EthStruct = {
    amountOfETHToSell: PromiseOrValue<BigNumberish>;
    amountOfETHToBuy: PromiseOrValue<BigNumberish>;
  };

  export type EthStructOutput = [BigNumber, BigNumber] & {
    amountOfETHToSell: BigNumber;
    amountOfETHToBuy: BigNumber;
  };

  export type TradeStruct = {
    tradeId: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    buyer: PromiseOrValue<string>;
    nft: TradeLib.NFTStruct;
    token: TradeLib.TokenStruct;
    eth: TradeLib.EthStruct;
    deadline: PromiseOrValue<BigNumberish>;
    dateCreated: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type TradeStructOutput = [
    BigNumber,
    string,
    string,
    TradeLib.NFTStructOutput,
    TradeLib.TokenStructOutput,
    TradeLib.EthStructOutput,
    BigNumber,
    BigNumber,
    number
  ] & {
    tradeId: BigNumber;
    seller: string;
    buyer: string;
    nft: TradeLib.NFTStructOutput;
    token: TradeLib.TokenStructOutput;
    eth: TradeLib.EthStructOutput;
    deadline: BigNumber;
    dateCreated: BigNumber;
    status: number;
  };
}

export interface TrustMeInterface extends utils.Interface {
  functions: {
    "addTrade((uint256,address,address,(address,uint256,address,uint256),(address,uint256,address,uint256),(uint256,uint256),uint256,uint256,uint8))": FunctionFragment;
    "cancelTrade(uint256)": FunctionFragment;
    "checkExpiredTrades()": FunctionFragment;
    "confirmTrade(uint256)": FunctionFragment;
    "getPendingTradesIDs()": FunctionFragment;
    "getTrade(uint256)": FunctionFragment;
    "getTradeStatus(uint256)": FunctionFragment;
    "getTradesIDsByUser(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pendingTradesIDs(uint256)": FunctionFragment;
    "tradeIDToTrade(uint256)": FunctionFragment;
    "tradeIdToETHFromSeller(uint256)": FunctionFragment;
    "userToTradesIDs(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTrade"
      | "cancelTrade"
      | "checkExpiredTrades"
      | "confirmTrade"
      | "getPendingTradesIDs"
      | "getTrade"
      | "getTradeStatus"
      | "getTradesIDsByUser"
      | "onERC721Received"
      | "pendingTradesIDs"
      | "tradeIDToTrade"
      | "tradeIdToETHFromSeller"
      | "userToTradesIDs"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTrade",
    values: [TradeLib.TradeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkExpiredTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTradesIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradesIDsByUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTradesIDs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeIDToTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeIdToETHFromSeller",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userToTradesIDs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkExpiredTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTradesIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradesIDsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTradesIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeIDToTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeIdToETHFromSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToTradesIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "TradeCanceled(uint256,address,address)": EventFragment;
    "TradeConfirmed(uint256,address,address)": EventFragment;
    "TradeCreated(uint256,address,address)": EventFragment;
    "TradeExpired(uint256,address,address)": EventFragment;
    "TradeWithdrawn(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TradeCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeWithdrawn"): EventFragment;
}

export interface TradeCanceledEventObject {
  tradeID: BigNumber;
  seller: string;
  buyer: string;
}
export type TradeCanceledEvent = TypedEvent<
  [BigNumber, string, string],
  TradeCanceledEventObject
>;

export type TradeCanceledEventFilter = TypedEventFilter<TradeCanceledEvent>;

export interface TradeConfirmedEventObject {
  tradeID: BigNumber;
  seller: string;
  buyer: string;
}
export type TradeConfirmedEvent = TypedEvent<
  [BigNumber, string, string],
  TradeConfirmedEventObject
>;

export type TradeConfirmedEventFilter = TypedEventFilter<TradeConfirmedEvent>;

export interface TradeCreatedEventObject {
  tradeID: BigNumber;
  seller: string;
  buyer: string;
}
export type TradeCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  TradeCreatedEventObject
>;

export type TradeCreatedEventFilter = TypedEventFilter<TradeCreatedEvent>;

export interface TradeExpiredEventObject {
  tradeID: BigNumber;
  seller: string;
  buyer: string;
}
export type TradeExpiredEvent = TypedEvent<
  [BigNumber, string, string],
  TradeExpiredEventObject
>;

export type TradeExpiredEventFilter = TypedEventFilter<TradeExpiredEvent>;

export interface TradeWithdrawnEventObject {
  tradeID: BigNumber;
  seller: string;
  buyer: string;
}
export type TradeWithdrawnEvent = TypedEvent<
  [BigNumber, string, string],
  TradeWithdrawnEventObject
>;

export type TradeWithdrawnEventFilter = TypedEventFilter<TradeWithdrawnEvent>;

export interface TrustMe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrustMeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTrade(
      transactionInput: TradeLib.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkExpiredTrades(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPendingTradesIDs(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TradeLib.TradeStructOutput]>;

    getTradeStatus(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTradesIDsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingTradesIDs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tradeIDToTrade(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        TradeLib.NFTStructOutput,
        TradeLib.TokenStructOutput,
        TradeLib.EthStructOutput,
        BigNumber,
        BigNumber,
        number
      ] & {
        tradeId: BigNumber;
        seller: string;
        buyer: string;
        nft: TradeLib.NFTStructOutput;
        token: TradeLib.TokenStructOutput;
        eth: TradeLib.EthStructOutput;
        deadline: BigNumber;
        dateCreated: BigNumber;
        status: number;
      }
    >;

    tradeIdToETHFromSeller(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userToTradesIDs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addTrade(
    transactionInput: TradeLib.TradeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelTrade(
    _tradeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkExpiredTrades(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmTrade(
    _tradeID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPendingTradesIDs(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTrade(
    _tradeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TradeLib.TradeStructOutput>;

  getTradeStatus(
    _tradeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTradesIDsByUser(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingTradesIDs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tradeIDToTrade(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      TradeLib.NFTStructOutput,
      TradeLib.TokenStructOutput,
      TradeLib.EthStructOutput,
      BigNumber,
      BigNumber,
      number
    ] & {
      tradeId: BigNumber;
      seller: string;
      buyer: string;
      nft: TradeLib.NFTStructOutput;
      token: TradeLib.TokenStructOutput;
      eth: TradeLib.EthStructOutput;
      deadline: BigNumber;
      dateCreated: BigNumber;
      status: number;
    }
  >;

  tradeIdToETHFromSeller(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userToTradesIDs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _tradeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTrade(
      transactionInput: TradeLib.TradeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkExpiredTrades(overrides?: CallOverrides): Promise<void>;

    confirmTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingTradesIDs(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TradeLib.TradeStructOutput>;

    getTradeStatus(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTradesIDsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingTradesIDs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeIDToTrade(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        TradeLib.NFTStructOutput,
        TradeLib.TokenStructOutput,
        TradeLib.EthStructOutput,
        BigNumber,
        BigNumber,
        number
      ] & {
        tradeId: BigNumber;
        seller: string;
        buyer: string;
        nft: TradeLib.NFTStructOutput;
        token: TradeLib.TokenStructOutput;
        eth: TradeLib.EthStructOutput;
        deadline: BigNumber;
        dateCreated: BigNumber;
        status: number;
      }
    >;

    tradeIdToETHFromSeller(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToTradesIDs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TradeCanceled(uint256,address,address)"(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeCanceledEventFilter;
    TradeCanceled(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeCanceledEventFilter;

    "TradeConfirmed(uint256,address,address)"(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeConfirmedEventFilter;
    TradeConfirmed(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeConfirmedEventFilter;

    "TradeCreated(uint256,address,address)"(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeCreatedEventFilter;
    TradeCreated(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeCreatedEventFilter;

    "TradeExpired(uint256,address,address)"(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeExpiredEventFilter;
    TradeExpired(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeExpiredEventFilter;

    "TradeWithdrawn(uint256,address,address)"(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeWithdrawnEventFilter;
    TradeWithdrawn(
      tradeID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): TradeWithdrawnEventFilter;
  };

  estimateGas: {
    addTrade(
      transactionInput: TradeLib.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkExpiredTrades(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPendingTradesIDs(overrides?: CallOverrides): Promise<BigNumber>;

    getTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeStatus(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradesIDsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingTradesIDs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeIDToTrade(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeIdToETHFromSeller(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToTradesIDs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTrade(
      transactionInput: TradeLib.TradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkExpiredTrades(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPendingTradesIDs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrade(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeStatus(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradesIDsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingTradesIDs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeIDToTrade(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeIdToETHFromSeller(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToTradesIDs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tradeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
